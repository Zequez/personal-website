---
import Layout from "../../layouts/Base.astro";
import { Icon } from "astro-icon/components";

import {
  groupedPortfolio,
  parseGithubRepo,
  parseUrl,
  timesMap,
  generatePortfolioImages,
} from "../../lib/portfolio-utils";

import PortfolioGallery from "../../components/PortfolioGallery";
import PortfolioIndex from "../../components/PortfolioIndex.astro";

const portfolioImages = await generatePortfolioImages();
---

<Layout
  title="Portfolio"
  description="A showcase of stuff I've created over the years"
  nav="portfolio"
>
  <div class="mx-auto max-w-screen-md px4 py4 text-black/60">
    <PortfolioIndex />
    {
      Object.entries(groupedPortfolio).map(([timeGroup, portfolioEntries]) => (
        <div>
          <div class="text-2xl font-bold mb4">
            {timesMap[timeGroup as keyof typeof timesMap]}
          </div>
          {portfolioEntries.map((portfolioEntry) => (
            <div
              class="bg-main-700 text-white rounded-md b-1 b-black/10 shadow-md mb4"
              id={portfolioEntry.slug}
            >
              <div class="flex flex-col">
                <PortfolioGallery
                  client:load
                  media={portfolioImages[portfolioEntry.id] as any}
                />
                <div class="p4">
                  <h2 class="text-3xl font-bold">
                    {portfolioEntry.data.title}
                  </h2>
                  <p>{portfolioEntry.data.description}</p>
                </div>
              </div>
              <div class="bg-black/10 pl2 pt2 flex flex-wrap">
                {portfolioEntry.data.tags.map((tag) => (
                  <div class="px1 py.5 bg-black/20 rounded-md mr2 mb2">
                    {tag}
                  </div>
                ))}
              </div>
              <div class="flexce space-x-2 bg-black/20 p2 flex-wrap">
                <div>
                  <span class="font-bold">Status:</span>{" "}
                  {portfolioEntry.data.status}
                </div>
                <div class="flex-grow" />
                {portfolioEntry.data.repoLink ? (
                  <div class="flexcc">
                    <Icon name="fa-brands:github" class="mr-2" />
                    <a
                      href={portfolioEntry.data.repoLink}
                      target="_blank"
                      class="text-main-900 underline"
                    >
                      {parseGithubRepo(portfolioEntry.data.repoLink)}
                    </a>
                  </div>
                ) : null}
                {portfolioEntry.data.liveLink &&
                portfolioEntry.data.repoLink ? (
                  <div class="">â€¢</div>
                ) : null}
                {portfolioEntry.data.liveLink ? (
                  <div class="flexcc">
                    <Icon name="fa-solid:globe" class="mr-2" />
                    Live&nbsp;
                    <a
                      href={portfolioEntry.data.liveLink}
                      target="_blank"
                      class="text-main-900 underline"
                    >
                      {parseUrl(portfolioEntry.data.liveLink)}
                    </a>
                  </div>
                ) : null}
              </div>
            </div>
          ))}
        </div>
      ))
    }
  </div>
</Layout>
